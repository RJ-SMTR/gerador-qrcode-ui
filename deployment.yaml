# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gerador-qrcode
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gerador-qrcode
  template:
    metadata:
      labels:
        app: gerador-qrcode
    spec:
      containers:
      - name: gerador-qrcode
        image: gcr.io/$PROJECT_ID/$IMAGE_GERADOR_QRCODE:$GITHUB_SHA
        env:
          - name: INFISICAL_URL
            valueFrom:
              secretKeyRef:
                name: envs
                key: INFISICAL_URL
          - name: INFISICAL_TOKEN
            valueFrom:
              secretKeyRef:
                name: envs
                key: INFISICAL_TOKEN
          
      restartPolicy: Always
---
# Service
apiVersion: v1
kind: Service
metadata:
  labels:
    app: gerador-qrcode
  name: gerador-qrcode
spec:
  ports:
    - name: "80"
      port: 80
      targetPort: 80
  selector:
    app: gerador-qrcode
---
# Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gerador-qrcode-ingress
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
    cert-manager.io/issuer: "letsencrypt-production"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: 200m
spec:
  tls:
    - hosts:
        - gerador-qrcode.mobilidade.rio
      secretName: gerador-qrcode-tls
  rules:
    - host: gerador-qrcode.mobilidade.rio
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: gerador-qrcode
                port:
                  number: 80
---
# Issuer
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: letsencrypt-production
spec:
  acme:
    email: borismarinho.smtr@gmail.com
    server: https://acme-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      name: letsencrypt-production
    solvers:
      - http01:
          ingress:
            class: nginx
